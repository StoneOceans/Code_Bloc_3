name: Tests Fonctionnels avec Couverture de Code

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test-api:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Installer Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Installer les dépendances
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          # On s'assure que coverage est bien installé
          pip install pytest requests coverage

      - name: Lancer les tests fonctionnels et calculer la couverture
        env:
          DJANGO_SETTINGS_MODULE: backend.settings
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432      
        run: |
          # 1. Lancer le serveur Django en arrière-plan avec l'instrumentation de coverage
          # --source=backend -> ne mesure la couverture que sur notre code source
          # --branch -> active la mesure de couverture des branches (if/else)
          # L'esperluette '&' en fin de ligne lance la commande en arrière-plan
          coverage run --source=backend --branch backend/manage.py runserver &

          # Laisser au serveur le temps de démarrer
          echo "Attente du démarrage du serveur..."
          sleep 10

          # 2. Lancer les tests API externes.
          # Si un test échoue, le workflow s'arrêtera ici (comportement attendu).
          echo "Lancement des tests API..."
          pytest .github/workflows/test_main.py

          # 3. Arrêter le serveur Django pour que le fichier .coverage soit sauvegardé
          # On utilise pkill pour trouver et arrêter le processus du serveur.
          echo "Arrêt du serveur..."
          pkill -f "manage.py runserver"
          sleep 2 # Laisser le temps au processus de se terminer proprement

          # 4. Générer les rapports de couverture à partir du fichier .coverage créé
          echo "Génération du rapport de couverture :"
          # Affiche le rapport dans la console avec les lignes manquantes (-m)
          coverage report -m

          # Crée un rapport HTML détaillé dans un dossier nommé "htmlcov"
          coverage html -d htmlcov

      - name: Uploader le rapport de couverture HTML
        uses: actions/upload-artifact@v4
        with:
          name: rapport-couverture-html
          path: htmlcov
